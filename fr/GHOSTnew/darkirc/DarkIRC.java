/*
 * This file is part of DarkIRC.
 *
 *  DarkIRC is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  DarkIRC is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with DarkIRC.  If not, see <http://www.gnu.org/licenses/>
 */

package fr.GHOSTnew.darkirc;

import java.awt.Color;
import java.awt.Point;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;

import fr.GHOSTnew.darkirc.gui.guiConnect;
import fr.GHOSTnew.darkirc.gui.guiOption;
import fr.GHOSTnew.darkirc.utils.*;
import fr.GHOSTnew.darkirc.utils.userListAction.BanAction;
import fr.GHOSTnew.darkirc.utils.userListAction.DeopAction;
import fr.GHOSTnew.darkirc.utils.userListAction.DevoiceAction;
import fr.GHOSTnew.darkirc.utils.userListAction.ExpulseAction;
import fr.GHOSTnew.darkirc.utils.userListAction.OpAction;
import fr.GHOSTnew.darkirc.utils.userListAction.QueryAction;
import fr.GHOSTnew.darkirc.utils.userListAction.VoiceAction;

import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.plaf.basic.BasicTabbedPaneUI;

import org.jibble.pircbot.IrcException;
import org.jibble.pircbot.TrustingSSLSocketFactory;
import org.jibble.pircbot.User;

/**
 * @author GHOSTnew
 */
@SuppressWarnings("serial")
public class DarkIRC extends javax.swing.JFrame {
    
    public static DarkIRCBot bot = new DarkIRCBot();
    public static String currentChan = "status";
    public static List<String> channelsList = new ArrayList<String>();
    public static List<String> channelsTopic = new ArrayList<String>();
    public static DefaultListModel listModel = new DefaultListModel();
    private static DarkIRC main;
    public static Locale locale;
    public static ResourceBundle messageLang;
    public DarkIRC() {
    	initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {
    	
    	jPanel1 = new javax.swing.JPanel();
    	channelsList.add(currentChan);
    	channelsTopic.add("");
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jTabbedPane2.setUI(new BasicTabbedPaneUI()); 
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        chanPanel = new javax.swing.JPanel();
        topicField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        userList = new javax.swing.JList(listModel);
        userList.setCellRenderer(new UserRenderer());
        
        connectDisconnectButton = new javax.swing.JButton();
        joinButton = new javax.swing.JButton();
        scriptingButton = new javax.swing.JButton();
        configButton = new javax.swing.JButton();
        
        connectDisconnectButton.setIcon(new ImageIcon(this.getClass().getResource("connect.png")));
        joinButton.setIcon(new ImageIcon(this.getClass().getResource("join.png")));
        joinButton.setEnabled(false);
        scriptingButton.setIcon(new ImageIcon(this.getClass().getResource("scripting.png")));
        configButton.setIcon(new ImageIcon(this.getClass().getResource("config.png")));
        
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);
        
        ///////////////////////////////////////
        final JPopupMenu JPopupMenu = new JPopupMenu();
        final JMenuItem jQuery = new JMenuItem();
        jQuery.setAction(new QueryAction("Query"));
        JPopupMenu.add(jQuery);
        JPopupMenu.addSeparator();
        final JMenuItem jExpulse = new JMenuItem();
        jExpulse.setAction(new ExpulseAction("Expulser"));
        JPopupMenu.add(jExpulse);
        final JMenuItem jBannir = new JMenuItem();
        jBannir.setAction(new BanAction("Bannir"));
        JPopupMenu.add(jBannir);
        JPopupMenu.addSeparator();
        final JMenuItem jVoice = new JMenuItem();
        jVoice.setAction(new VoiceAction("Voice"));
        JPopupMenu.add(jVoice);
        JMenuItem jDevoice = new JMenuItem();
        jDevoice.setAction(new DevoiceAction("Devoice"));
        JPopupMenu.add(jDevoice);
        final JMenuItem jOp = new JMenuItem();
        jOp.setAction(new OpAction("Op"));
        JPopupMenu.add(jOp);;
        final JMenuItem jDeop = new JMenuItem();
        jDeop.setAction(new DeopAction("DeOp"));
        JPopupMenu.add(jDeop);
		
        userList.addMouseListener(new MouseAdapter() {
            
        	public void mousePressed(MouseEvent e)  {check(e);}
        	public void mouseReleased(MouseEvent e) {check(e);}
        	
        	public void check(MouseEvent e) {
        		if(SwingUtilities.isRightMouseButton(e) && e.isPopupTrigger()){
        			int raw = userList.locationToIndex(new Point(e.getX(), e.getY()));
        			userList.setSelectedIndex(raw); //select the item
        		    JPopupMenu.show(userList, e.getX(), e.getY()); //and show the menu
        		}
        	}
        });
        
        jButton1.setText("Send");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        
        scriptingButton.addActionListener(new java.awt.event.ActionListener() {
            @SuppressWarnings("static-access")
			public void actionPerformed(java.awt.event.ActionEvent evt) {
            	JOptionPane jop = new JOptionPane();
                jop.showMessageDialog(null, "Not implemented yet", "DarkIRC - Warning", JOptionPane.WARNING_MESSAGE);
            }
        });
        
        configButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	guiOption optnWindows = new guiOption(main, messageLang.getString("title_option"), true);
        		optnWindows.showGUI();
            }
        });
        connectDisconnectButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
            	if(!bot.isConnected()){
            		guiConnect connectWindows = new guiConnect(null, messageLang.getString("title_connect"), true);
            		String co[] = connectWindows.showGUI();
            		if(co[1] != null && co[2] != null){
            			Properties prop = new Properties();
            			InputStream input = null;
            			try {
            		 
            				input = new FileInputStream("config.properties");
            				prop.load(input);
            				if(prop.getProperty("proxy_host", "") != "" || prop.getProperty("proxy_host", "") != null){
            					if(prop.getProperty("proxy_type", "HTTP").equalsIgnoreCase("http")){
            						System.setProperty("http.proxyHost", prop.getProperty("proxy_host", ""));
            						System.setProperty("http.proxyPort", prop.getProperty("proxy_port", "80"));
            					}else if(prop.getProperty("proxy_type", "HTTP").equalsIgnoreCase("https")){
            						System.setProperty("https.proxyHost", prop.getProperty("proxy_host", ""));
            						System.setProperty("https.proxyPort", prop.getProperty("proxy_port", "80"));
            					}else if(prop.getProperty("proxy_type", "HTTP").equalsIgnoreCase("socks")){
            						System.setProperty("socksProxyHost", prop.getProperty("proxy_host", ""));
                    				System.setProperty("socksProxyPort", prop.getProperty("proxy_port", "80"));
            					}
            				}
            			} catch (IOException ex) {
            				ex.printStackTrace();
            			} finally {
            				if (input != null) {
            					try {
            						input.close();
            					} catch (IOException e) {
            						e.printStackTrace();
            					}
            				}
            			}
            			jTextPane1.setText(jTextPane1.getText() + messageLang.getString("connect_msg") + "\n");
            			try {
            				bot.setNick(co[0]);
            				if(Boolean.valueOf(co[3])){
            					bot.connect(co[1],Integer.parseInt(co[2]),new TrustingSSLSocketFactory());
            				}else{
            					bot.connect(co[1],Integer.parseInt(co[2]));
            				}
                			DarkIRC.setConnected(true);
                		}catch (IOException ex) {
                			Logger.getLogger(DarkIRC.class.getName()).log(Level.SEVERE, null, ex);
                		}catch (IrcException ex) {
                			Logger.getLogger(DarkIRC.class.getName()).log(Level.SEVERE, null, ex);
                		}
            		}
            	}else{
            		bot.disconnect();
            		setConnected(false);
            	}
            }
        });
        
        joinButton.addActionListener(new java.awt.event.ActionListener() {
            @SuppressWarnings("static-access")
			public void actionPerformed(java.awt.event.ActionEvent evt) {
            	JOptionPane jop = new JOptionPane();
                String channel = jop.showInputDialog(null, messageLang.getString("gui_join_text"), messageLang.getString("title_join"), JOptionPane.QUESTION_MESSAGE);
                if(channel != null && channel != "" && channel.startsWith("#")){
                	boolean NoExist = true;
                	for(int i = 0; i < channelsList.size(); i++){
            			if(channelsList.get(i).equalsIgnoreCase(channel)){
            				NoExist = false;
            				logs.makeLog(DarkIRC.currentChan + ".log", jTextPane1.getText());
            				currentChan = DarkIRC.channelsList.get(i);
            				jTabbedPane2.setSelectedIndex(i);
            				jTextPane1.setText(logs.readLog(currentChan + ".log"));
            			}
                	}
                	if(NoExist){
                		DarkIRC.bot.joinChannel(channel);
                		logs.makeLog(DarkIRC.currentChan + ".log", DarkIRC.jTextPane1.getText());
                		DarkIRC.jTextPane1.setText("");
                		DarkIRC.currentChan = channel;
                		DarkIRC.channelsList.add(channel);
                		DarkIRC.topicField.setVisible(true);
                		DarkIRC.jScrollPane2.setVisible(true);
                		DarkIRC.jTabbedPane2.addTab(currentChan, null);
                		DarkIRC.jTabbedPane2.setSelectedIndex(channelsList.size()-1);
                	}
                }
            }
        });
        

        jTabbedPane2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane2MouseClicked(evt);
            }
        });
        jTextField1.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent touche) {
                if (touche.getKeyCode()==KeyEvent.VK_ENTER){
                	if(jTextField1.getText() != "" || jTextField1.getText() != null){
                		InputParser.InputMSG(jTextField1.getText());
                		jTextField1.setText(null);
                	}
                }
            }
            public void keyTyped(KeyEvent e)
            {
            	if(e.isControlDown()){
            		if (e.getKeyChar() == '\u000B'){ //ctrl + k
            			jTextField1.setText(jTextField1.getText() + '\u0003');
            		}else if (e.getKeyChar() == '\u0002'){ //ctrl + b
            			jTextField1.setText(jTextField1.getText() + '\u0002') ;
            		}else if (e.getKeyChar() == '\u0015') {//ctrl + u
            			jTextField1.setText(jTextField1.getText() + '\u001F') ;
            		}else if (e.getKeyChar() == '\u0012'){ // ctrl + r
            			jTextField1.setText(jTextField1.getText() + '\u000F') ;
            		}
            	}
            }
        });

        jTextPane1.setEditable(false);
        jScrollPane1.setViewportView(jTextPane1);

        jTabbedPane2.addTab("Status", chanPanel/*jScrollPane1*/);
         //////////////////////////////////////////////
        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(scriptingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(configButton,  javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 128, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scriptingButton, javax.swing.GroupLayout.DEFAULT_SIZE, 16, Short.MAX_VALUE)
            .addComponent(configButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        /////////////////////////////////////////////////
        
        ////////////////////////////////////////////////
        jScrollPane2.setViewportView(userList);
        
        javax.swing.GroupLayout chanPanelLayout = new javax.swing.GroupLayout(chanPanel);
        chanPanel.setLayout(chanPanelLayout);
        chanPanelLayout.setHorizontalGroup(
        		chanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(topicField)
                .addGroup(chanPanelLayout.createSequentialGroup()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap())
            );
        chanPanelLayout.setVerticalGroup(
        		chanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(chanPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(topicField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(chanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE))
                    .addContainerGap())
            );
        
        topicField.setVisible(false);
        jScrollPane2.setVisible(false);
        /////////////////////////////////////////////
        
        
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            ////////////////////////////////////////
            .addGroup(layout.createSequentialGroup()
            		.addContainerGap()
                .addComponent(connectDisconnectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(joinButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            ///////////////////////////////////////            
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 556, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            ////////////////////////////////////
            .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING/*javax.swing.GroupLayout.Alignment.LEADING, true*/)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(connectDisconnectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(joinButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                //////////////////////
           // .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
             //  .addContainerGap()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
    	if(jTextField1.getText() != "" || jTextField1.getText() != null){
    		InputParser.InputMSG(jTextField1.getText());
    	    jTextField1.setText(null);
    	}
    }

    private void jTabbedPane2MouseClicked(java.awt.event.MouseEvent evt) {
        if(!channelsList.get(jTabbedPane2.getSelectedIndex()).equalsIgnoreCase(currentChan)){
        	jTabbedPane2.setForegroundAt(jTabbedPane2.getSelectedIndex(), Color.BLACK);
        	logs.makeLog(currentChan + ".log", jTextPane1.getText());
        	jTextPane1.setText("");
        	topicField.setText("");
        	currentChan = channelsList.get(jTabbedPane2.getSelectedIndex());
        	jTextPane1.setText(logs.readLog(currentChan + ".log"));
        	topicField.setText(channelsTopic.get(jTabbedPane2.getSelectedIndex()));
        }
        if(jTabbedPane2.getSelectedIndex() == 0){
        	topicField.setVisible(false);
    		jScrollPane2.setVisible(false);
        }else if(channelsList.get(jTabbedPane2.getSelectedIndex()).startsWith("#")){
        	topicField.setVisible(true);
    		jScrollPane2.setVisible(true);
            listModel.removeAllElements();
        	User[] u = bot.getUsers(currentChan);
        	for(int i = 0; i < u.length; i++){
        		listModel.addElement(u[i].getPrefix() + u[i].getNick());
        	}
        }else{
        	topicField.setVisible(false);
    		jScrollPane2.setVisible(false);
        }
    }

    /**
     * @param args the command line arguments
     * @throws IOException 
     */                                           
    public static void main(String args[]) {
       
    	File f = new File("config.properties");
    	if(!f.exists()){
    	  try {
			f.createNewFile();
    	  } catch (IOException e) {
			e.printStackTrace();
		  }
    	}
    	Properties prop = new Properties();
		InputStream input = null;
	 
		try {
	 
			input = new FileInputStream("config.properties");

			// load a properties file
			prop.load(input);
			locale = language.getLocale(prop.getProperty("langue", "Français"));
			messageLang = ResourceBundle.getBundle("fr.GHOSTnew.darkirc.i18n.darkirc", locale);
			try {
	            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
	                if (prop.getProperty("style", "Nimbus").equals(info.getName())) {
	                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
	                    break;
	                }
	            }
	        } catch (ClassNotFoundException ex) {
	            java.util.logging.Logger.getLogger(DarkIRC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (InstantiationException ex) {
	            java.util.logging.Logger.getLogger(DarkIRC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (IllegalAccessException ex) {
	            java.util.logging.Logger.getLogger(DarkIRC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
	            java.util.logging.Logger.getLogger(DarkIRC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        }
		} catch (IOException ex) {
			
			ex.printStackTrace();
		} finally {
			if (input != null) {
				try {
					input.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                main = new DarkIRC();
                main.setTitle("DarkIRC");
                main.setIconImage(new ImageIcon(this.getClass().getResource("Black-Internet-icon.png")).getImage());
                main.setVisible(true);
               
            }
        });
    }
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextField jTextField1;
    public static javax.swing.JTextPane jTextPane1;
    public static javax.swing.JList userList;
    public static javax.swing.JPanel chanPanel;
    public static javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JTextField topicField;
    public static javax.swing.JButton connectDisconnectButton;
    public static javax.swing.JButton joinButton;
    public static boolean UconnectedU = false;
    private javax.swing.JButton scriptingButton;
    private javax.swing.JButton configButton;
    private javax.swing.JPanel jPanel1;
	public static void setConnected(boolean b) {
		if(b){
			connectDisconnectButton.setIcon(new ImageIcon(DarkIRC.class.getResource("disconnect.png")));
			joinButton.setEnabled(true);
			UconnectedU = true;
		}else {
			connectDisconnectButton.setIcon(new ImageIcon(DarkIRC.class.getResource("connect.png")));
			joinButton.setEnabled(false);
			UconnectedU = false;
		}
	}

}
